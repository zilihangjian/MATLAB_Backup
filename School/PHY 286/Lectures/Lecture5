euler_Decay(100,,.1,100,.5)
 euler_Decay(100,,.1,100,.5)
                 |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
euler_Decay(100,.1,100,.5)
{Undefined function 'euler_Decay' for input arguments of type 'double'.
} 
euler_Decay(100,.1,100,.5)
{Undefined function 'euler_Decay' for input arguments of type 'double'.
} 
euler_Decay(100,.1,100,.5)
{Undefined function 'euler_Decay' for input arguments of type 'double'.
} 
euler_Decay(100,.1,100,.5)
{Undefined function 'euler_Decay' for input arguments of type 'double'.
} 
euler_Decay(100,.1,100,.5)
{Undefined function 'euler_Decay' for input arguments of type 'double'.
} 
euler_Decay(100,1,100,.5)
{Undefined function 'euler_Decay' for input arguments of type 'double'.
} 
euler_Decay(100,1,100,.5)clc
 euler_Decay(100,1,100,.5)clc
                          |
{Error: Unexpected MATLAB expression.
} 
clc
clear
clc
[x,t] = Class_Euler_Decay(100,.01,100,.5);
{Undefined function 'Class_Euler_Decay' for input arguments of type 'double'.
} 
[x,t] = Class_Euler_Decay(100,.01,100,.5);
[x,t] = Class_Euler_Decay(100,.01,100,.5);
[x,t] = Class_Euler_Decay(100,.1,100,.5);
help subplot
 <strong>subplot</strong> Create axes in tiled positions.
    H = <strong>subplot</strong>(m,n,p), or <strong>subplot</strong>(mnp), breaks the Figure window
    into an m-by-n matrix of small axes, selects the p-th axes for
    the current plot, and returns the axes handle.  The axes are
    counted along the top row of the Figure window, then the second
    row, etc.  For example,
 
        <strong>subplot</strong>(2,1,1), PLOT(income)
        <strong>subplot</strong>(2,1,2), PLOT(outgo)
 
    plots income on the top half of the window and outgo on the
    bottom half. If the CurrentAxes is nested in a uipanel the
    panel is used as the parent for the subplot instead of the
    current figure.
 
    <strong>subplot</strong>(m,n,p), if the axes already exists, makes it current.
    <strong>subplot</strong>(m,n,p,'replace'), if the axes already exists, deletes it and
    creates a new axes.
    <strong>subplot</strong>(m,n,p,'align') places the axes so that the plot boxes
    are aligned, but does not prevent the labels and ticks from
    overlapping.
    <strong>subplot</strong>(m,n,P), where P is a vector, specifies an axes position
    that covers all the subplot positions listed in P.
    <strong>subplot</strong>(H), where H is an axes handle, is another way of making
    an axes current for subsequent plotting commands.
 
    <strong>subplot</strong>('position',[left bottom width height]) creates an
    axes at the specified position in normalized coordinates (in
    in the range from 0.0 to 1.0).
 
    <strong>subplot</strong>(..., PROP1, VALUE1, PROP2, VALUE2, ...) sets the
    specified property-value pairs on the subplot axes. To add the
    subplot to a specific figure pass the figure handle as the
    value for the 'Parent' property.
 
    If a <strong>subplot</strong> specification causes a new axes to overlap an
    existing axes, the existing axes is deleted - unless the position
    of the new and existing axes are identical.  For example,
    the statement <strong>subplot</strong>(1,2,1) deletes all existing axes overlapping
    the left side of the Figure window and creates a new axes on that
    side - unless there is an axes there with a position that exactly
    matches the position of the new axes (and 'replace' was not specified),
    in which case all other overlapping axes will be deleted and the
    matching axes will become the current axes.
 
    <strong>subplot</strong>(111) is an exception to the rules above, and is not
    identical in behavior to <strong>subplot</strong>(1,1,1).  For reasons of backwards
    compatibility, it is a special case of subplot which does not
    immediately create an axes, but instead sets up the figure so that
    the next graphics command executes CLF RESET in the figure
    (deleting all children of the figure), and creates a new axes in
    the default position.  This syntax does not return a handle, so it
    is an error to specify a return argument.  The delayed CLF RESET
    is accomplished by setting the figure's NextPlot to 'replace'.
 
    Be aware when creating subplots from scripts that the Position
    property of subplots is not finalized until either a drawnow
    command is issued, or MATLAB returns to await a user command.
    That is, the value obtained for subplot i by the command
    get(h(i),'Position') will not be correct until the script
    refreshes the plot or exits.
 
    See also  <a href="matlab:help gca">gca</a>, <a href="matlab:help gcf">gcf</a>, <a href="matlab:help axes">axes</a>, <a href="matlab:help figure">figure</a>, <a href="matlab:help uipanel">uipanel</a>

    Reference page in Help browser
       <a href="matlab:doc subplot">doc subplot</a>

[x,t] = Class_Euler_Decay(100,.1,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.1,100,.5);
[x,t] = Class_Euler_Decay(100,.1,100,.5);
[x,t] = Class_Euler_Decay(100,.1,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.1,100,.5);
[x,t] = Class_Euler_Decay(100,.1,100,.5);
[x,t] = Class_Euler_Decay(100,.1,100,.5);
<a href="matlab: opentoline('C:\Users\Johnathan\Documents\MATLAB\PHY 287\Week3\Class_Euler_Decay.m',15,1)">15  </a>Nt = A*exp(-t/tau);
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbquit; end
[x,t] = Class_Euler_Decay(100,.1,100,.5);
[x,t] = Class_Euler_Decay(100,.5,100,.5);
[x,t] = Class_Euler_Decay(100,.01,100,.5);
[x,t] = Class_Euler_Decay(100,.001,100,.5);
[x,t] = Class_Euler_Decay(100,.001,10000,.5);
{Error using <a href="matlab:helpUtils.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same lengths.

Error in <a href="matlab:helpUtils.errorDocCallback('Class_Euler_Decay', 'C:\Users\Johnathan\Documents\MATLAB\PHY 287\Week3\Class_Euler_Decay.m', 24)" style="font-weight:bold">Class_Euler_Decay</a> (<a href="matlab: opentoline('C:\Users\Johnathan\Documents\MATLAB\PHY 287\Week3\Class_Euler_Decay.m',24,0)">line 24</a>)
plot(t,Error,'g');
} 
clc
[x,t] = Class_Euler_Decay(100,.001,10000,.5);
{Error using <a href="matlab:helpUtils.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same lengths.

Error in <a href="matlab:helpUtils.errorDocCallback('Class_Euler_Decay', 'C:\Users\Johnathan\Documents\MATLAB\PHY 287\Week3\Class_Euler_Decay.m', 24)" style="font-weight:bold">Class_Euler_Decay</a> (<a href="matlab: opentoline('C:\Users\Johnathan\Documents\MATLAB\PHY 287\Week3\Class_Euler_Decay.m',24,0)">line 24</a>)
plot(t,Error,'g');
} 
[x,t] = Class_Euler_Decay(100,.001,10000,.5);
{Error using <a href="matlab:helpUtils.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same lengths.

Error in <a href="matlab:helpUtils.errorDocCallback('Class_Euler_Decay', 'C:\Users\Johnathan\Documents\MATLAB\PHY 287\Week3\Class_Euler_Decay.m', 24)" style="font-weight:bold">Class_Euler_Decay</a> (<a href="matlab: opentoline('C:\Users\Johnathan\Documents\MATLAB\PHY 287\Week3\Class_Euler_Decay.m',24,0)">line 24</a>)
plot(t,Error,'g');
} 
[x,t] = Class_Euler_Decay(100,.001,10000,.5);
<a href="matlab: opentoline('C:\Users\Johnathan\Documents\MATLAB\PHY 287\Week3\Class_Euler_Decay.m',15,1)">15  </a>Nt = A*exp(-t/tau);
if system_dependent('IsDebugMode')==1, dbquit; end
[x,t] = Class_Euler_Decay(100,.001,10000,.5);
[x,t] = Class_Euler_Decay(100,.001,10000,.5);
[x,t] = Class_Euler_Decay(100,.001,10000,.5);
[x,t] = Class_Euler_Decay(100,.001,10000,.5);
[x,t] = Class_Euler_Decay(100,.001,10000,.5);
[x,t] = Class_Euler_Decay(100,.01,100,.5);
[x,t] = Class_Euler_Decay(100,.01,100,.5);
[x,t] = Class_Euler_Decay(100,.01,100,20);
[x,t] = Class_Euler_Decay(100,.01,100,5);
[x,t] = Class_Euler_Decay(100,.01,100,1);
clc
for n = 1:20




















clc
clear
clc

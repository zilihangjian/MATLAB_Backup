ECE 491 HW6 MATLAB
Problem 1
function [] = problem1(guess1, guess2, error, iterLimit)
%function [] = problem1(guess1, guess2, error, iterLimit)

%Variables / Function Declarations
syms t1 t2;
f1 = @(t1, t2)(1 - 2*cos(3*t1) + 2*cos(3*t2));
f2 = @(t1, t2)(1 - 2*cos(5*t1) + 2*cos(5*t2));
jacobFunc = @(t1,t2)([6*sin(3*t1), -6*sin(3*t2);10*sin(5*t1), -10*sin(5*t2)]);
ThetaNew = @(t1, t2)([t1; t2] -inv(jacobFunc(t1,t2))*[f1(t1,t2);f2(t1,t2)]); %#ok<MINV>

%Iterations
t1Init = guess1; %Theta 1,0
t2Init= guess2; %Theta 2,0

tempTheta = ThetaNew(t1Init, t2Init);
t1New = tempTheta(1);
t2New = tempTheta(2);

j = 1;
while(abs(t1Init - t1New) > error) && (abs(t2Init - t2New) > error) && (j < iterLimit)
    tempTheta = ThetaNew(t1New, t2New);
    t1Init = t1New;
    t2Init = t2New;
    t1New = tempTheta(1);
    t2New = tempTheta(2);
    j = j + 1;
end

t1New = t1New * (180/pi);
t2New = t2New * (180/pi);
if j < iterLimit
    fprintf('Theta 1: %f \nTheta 2: %f \nIterations: %f\n', t1New, t2New,j);
end

end
Output: 
>> problem1(.1,.4,.01,1000)
Theta 1: 23.644109 
Theta 2: 33.326616 
Iterations: 6.000000

Problem 2
function [] = problem2(guess1, guess2, error, iterLimit)
%function [] = problem2(guess1, guess2, guess3, error, iterLimit)

%Variables / Function Declarations
syms v2 t2;
G_11 = 0.2494; G_12 = -0.2494; G_21 = G_12; G_22 = G_11;
B_11 = -4.98; B_12 = 4.98; B_21 = B_12; B_22 = B_11;
P2 = 0.1358; Q2 = 0.2291;

%Unknowns V2 and T2
f1 = @(t2, v2)(P2 + v2*(G_21*cos(t2) + B_21*sin(t2)) + G_22*v2^2);
f2 = @(t2, v2)(Q2 + v2*(-G_21*sin(t2) - B_21*cos(t2)) - B_22*v2^2);

% jacob = jacobian([sym(f1),sym(f2)], [theta1, theta2]);
jacobFunc = @(t2,v2)([...
    -v2*G_21*sin(t2) + v2*B_21*cos(t2),...
    G_21*cos(t2) + B_21*sin(t2) + 2*v2*G_22;...
    v2*G_21*sin(t2) - v2*B_21*cos(t2),...
    G_21*cos(t2) - B_21*sin(t2) - 2*v2*B_22]);

newValues = @(t2, v2)([t2; v2] -inv(jacobFunc(t2,v2))*[f1(t2,v2);f2(t2,v2)]); %#ok<MINV>

%Iterations
t2Init= guess2; %T2[0]
v2Init = guess1; %V2[0]


tempValues = newValues(t2Init, v2Init);
t2New = tempValues(1);
v2New = tempValues(2);

j = 1;
while(abs(t2Init - t2New) > error) && (abs(v2Init - v2New) > error) ...
        && (j < iterLimit)
    tempValues = newValues(t2New, v2New);
    t2Init = t2New;
    v2Init = v2New;
    t2New = tempValues(1);
    v2New = tempValues(2);
    j = j + 1;
end

P2New = f1(t2New,v2New) - P2;
Q2New = f2(t2New,v2New) - Q2;
t2New = t2New * (180/pi);
fprintf('T2: %f(D) \nV2: %f \nIterations: %f\n', t2New, v2New,j);
fprintf('P2New: %f \nQ2New: %f\n', P2New, Q2New);
end

Output:
>> problem2(1,0,.01,1000)
T2: -1.510847(D) 
V2: 0.957741 
Iterations: 2.000000
P2New: -0.135766 
Q2New: -0.206194

Problem 3
function [] = problem3(guess1, guess2, guess3, error, iterLimit)
%function [] = problem3(guess1, guess2, guess3,error, iterLimt)

%Variables / Function Declarations
syms t1 t3 v1;
%YBus Matrix
B_11 = 15; B_12 = -5; B_13 = -10;
B_21 = -5; B_22 = 15; B_23 = -10;
B_31 = -10; B_32 = -10; B_33 = 20;
v3 = 1.02;
P1 = -0.8913; Q1 = -0.1434; P3 = -0.8184;

%Unknowns V2 and T2
f1 = @(t1, t3, v1)(-P1 + v1*B_12*sin(t1) + v1*v3*B_13*sin(t1-t3));%P1
f2 = @(t1, t3, v1)(-P3 + v3*v1*B_31*sin(t3-t1) + v3*B_32*sin(t3));%P3
f3 = @(t1, t3, v1)(-Q1 - v1^2*B_11 - v1*B_12*cos(t1) - v1*v3*B_13*cos(t1-t3));%Q1

% jacob = jacobian([sym(f1),sym(f2)], [theta1, theta2]);
jacobFunc = @(t1,t3,v1)([...
    v1*B_12*cos(t1) + v1*v3*B_13*cos(t1-t3),...
    -v1*v3*B_13*cos(t1-t3),...
    B_12*sin(t1) + v3*B_13*sin(t1-t3);...
    -v3*v1*B_31*cos(t3-t1),...
    v3*v1*B_31*cos(t3-t1) + v3*B_32*cos(t3),...
    v3*B_31*sin(t3-t1);...
    v1*B_12*sin(t1) + v1*v3*B_13*sin(t1-t3),...
    -v1*v3*B_13*sin(t1-t3),...
    -2*v1*B_11 - B_12*cos(t1) - v3*B_13*cos(t1-t3)]);

newValues = @(t1,t3,v1)([t1;t3;v1] -inv(jacobFunc(t1,t3,v1))...
    *[f1(t1,t3,v1);f2(t1,t3,v1);f3(t1,t3,v1)]);

%Iterations
t1Init = guess1; %T1[0]
t3Init= guess2; %T3[0]
v1Init = guess3; %V1[0]

tempValues = newValues(t1Init,t3Init,v1Init);
t1New = tempValues(1);
t3New = tempValues(2);
v1New = tempValues(3);

j = 1;
while(abs(t1Init - t1New) > error) && (abs(v1Init - v1New) > error) &&...
      (abs(t3Init - t3New) > error)  && (j < iterLimit)
    tempValues = newValues(t1New, t3New, v1New);
    t1Init = t1New;
    t3Init = t3New;
    v1Init = v1New;
    t1New = tempValues(1);
    t3New = tempValues(2);
    v1New = tempValues(3);
    j = j + 1;
end

t1NewD = t1New * (180/pi);
t3NewD = t3New * (180/pi);
fprintf('T1: %f \nT3: %f\nV1: %f \nIterations: %f\n', t1NewD, t3NewD, v1New,j);
P2New = v1New*B_21*sin(-t1New) + v3*B_23*sin(-t3New);
Q2New = -v1New*B_21*cos(-t1New) - B_22 - v3*B_23*cos(-t3New);
Q3New = -v3*v1New*B_31*cos(t3New - t1New) - v3*B_32*cos(t3New) - v3^2*B_33;
fprintf('P2: %f \nQ2: %f\nQ3: %f\n', P2New,Q2New,Q3New);

end

Output: 
>> problem3(0,0,.75,.01,1000)
T1: 7.383873 
T3: 5.957620
V1: 1.038145 
Iterations: 2.000000
P2: 1.725780 
Q2: 0.292589
Q3: -0.077294